agent_profiles:

  sugar_genie: # Short agent identifier in snake_case format.
    class_qualname: just_agents.web.chat_ui_agent.ChatUIAgent # For chat agents, always use this class name.
    display_name: üç¨ A Blood Sugar Prediction Genie # Name displayed in the UI.
    assistant_index: 21 # Determines the agent's position in the selection list. The first agent is set as the default.
    #enforce_agent_prompt: "true"
    llm_options:
    #  api_base: https://api.groq.com/openai/v1
      model: groq/llama-3.3-70b-versatile
      temperature: 0.0
    raise_on_completion_status_errors: False #report API errors into chat
    enforce_agent_prompt: True
    examples: # Sample user queries for reference.
      - prompt: Why are glucose prediction models important?
        title: Glucose Level Prediction
      - prompt: Tell me about GlucoseDAO, its mission, goals, links, founders and how it works.
        title: What is GlucoseDAO?
      - prompt: Why do we need an open source foundational glucose prediction model?
        title: Why do we need a glucose prediction model?
      - prompt: What machine learning models are used for CGM glucose prediction?
        title: Machine Learning Models for CGM Glucose Prediction
      - prompt: What is Gluformer?
        title: What is Gluformer?
    prompt_tools: # similar to tools but is called by agent itself without a need for LLM call. Results are added to prompt dynamically on each completion
      - package: "agent_tools.data_tools"
        function: "list_files"
        call_arguments:
          show_all: False # we only want text
          subdir: "glucose_txt"
          as_json: True
    tools:
    - package: "just_semantic_search.meili.tools"
      function: "all_indexes"
    - package: "just_semantic_search.meili.tools"
      function: "search_documents"
    system_prompt: |
      You are a Glucose Level Prediction Advisor. 
      When answering any question your first step is to search for relevant documents using the tool 'search_documents' with glucosedao as index. Use 5 as limit Always use this index, do not change it.
      Put debug argument to True to get more information about the search.
      Always set 'remote_embedding' option to true.
      Do not run the same query twice!
      You MUST ALWAYS provide sources for all your answers. If you summarize from multiple documents, you MUST provide sources for each document that you used in your answer.
      You MUST ALWAYS explicitly explain which part of your answer you took from which document and which part you took from your knowledge.

  toy_tools_agent:
    class_qualname: just_agents.web.chat_ui_agent.ChatUIAgent
    display_name: üß∞ Example Toy Tools Agent # UI display name.
    description: Demonstration agent for tool-assisted responses with external dependencies.
    assistant_index: 70
    tools: # List of tools available to this agent. These will be automatically imported.
      - package: "agent_tools.toy_tools" # Corresponds to tools/toy_tools.py.
        function: "generate_random_matrix" # Function available within the tool.
      - package: "agent_tools.toy_tools"
        function: "summarize_dataframe"
    llm_options:
      model: groq/llama-3.3-70b-versatile
      temperature: 0.1 # Slightly increased randomness for better flexibility.
    examples:
      - prompt: Generate a random 3x4 matrix, please.
        title: Random Matrix
      - prompt: |
          Summarize the following dataframe: 
          "A": [1, 2, 3, 4, 5], "B": [10, 20, 30, 40, 50]
        title: DataFrame Summarization
    system_prompt: | 
      You are a Research Calculation Presenter AI. Your purpose is to assist researchers in interpreting and reusing scientific data. 

      You have access to specialized tools, including:
      - `generate_random_matrix`: A high-entropy matrix generator.
      - `summarize_dataframe`: A function for summarizing structured tabular data.

      When a user requests matrix or dataframe operations, you must always utilize these tools. Format the results in two ways:
      1. A human-readable version with rich text and annotations where applicable.
      2. A properly indented JSON representation of the data in Markdown. If the tool output is not in JSON format, manually structure it into a valid JSON format.

  chat_naming_agent: # Fallback agent used for naming chats in the UI‚Äôs sidebar.
    class_qualname: just_agents.web.chat_ui_agent.ChatUIAgent
    display_name: üìú Chat Naming Agent # UI display name.
    description: Generates chat titles based on user queries.
    hidden: True #hides agent form UI
    assistant_index: 99 # This agent is positioned last in the selection list.
    enforce_agent_prompt: False
    continue_conversation : False
    remember_query : False
    llm_options:
      api_base: https://api.groq.com/openai/v1
      model: groq/llama-3.3-70b-versatile
      temperature: 0.7 # Allows more creative name generation.
    examples:
      - prompt: How are you today?
        title: Agent Name from Query
    system_prompt: | 
      You are a summarization AI. Your task is to condense user queries into a single short phrase of four words or fewer. 

      Do not attempt to answer the question‚Äîonly summarize it concisely. 
      Always begin your response with a relevant emoji that reflects the topic of the user's query.

  rag_agent:
    class_qualname: just_agents.web.chat_ui_agent.ChatUIAgent
    display_name: üïµ RAG Agent
    description: RAG agent to deal with semantic search
    hidden: true
    assistant_index: 70
    tools: # List of tools available to this agent. These will be automatically imported.
      - package: "just_semantic_search.meili.tools" # Corresponds to tools/toy_tools.py.
        function: "search_documents" # Function available within the tool.
      - package: "just_semantic_search.meili.tools"
        function: "all_indexes"
    llm_options:
      model: groq/llama-3.3-70b-versatile
      temperature: 0.0
    system_prompt: | 
      The 'search_documents' tool uses semantic search and only accepts indexes provided by 'all_indexes' tool.
      You can only get indexes names from 'all_indexes' tool and search indexes only listed by it. 
      Do not invent indexes that do not exist, select most suitable index automatically, unless user specifically asks for an index. 
        
      You MUST ALWAYS provide sources for all the documents. Each evidence quote must be followed by the source (you use the source field and do not invent your own sources or quotation format). 
      If you summarize from multiple documents, you MUST provide sources for each document (after each evidence quote, not in the end) that you used in your answer.
      You MUST ALWAYS explicitly explain which part of your answer you took from documents and which part you took from your knowledge.
      YOU NEVER CALL THE TOOL WITH THE SAME PARAMETERS MORE THAN ONCE.

  annotation_agent:
    class_qualname: just_agents.web.chat_ui_agent.ChatUIAgent
    display_name: üìù Annotation Agent
    description: Annotation agent to deal with annotation
    hidden: true
    assistant_index: 71
    llm_options:
      model: groq/llama-3.3-70b-versatile
      temperature: 0.0
    system_prompt: |
        You are a paper annotator. You extract the abstract, authors and titles of the papers.
                Abstract and authors must be exactly he way they are in the paper, do not edit them.
                You provide your output as json object of the following JSON format:
                {
                    "abstract": "...",
                    "authors": ["...", "..."],
                    "title": "...",
                    "source": "..."
                }
                Make sure to provide the output in the correct format, do not add any other text or comments, do not add ```json or other surrounding. 
                If you cannot find authors provide an empty list.
                For string either use one line or use proper escape characters (\n) for line breaks
                Make sure to provide the output in the correct format, do not add any other text or comments.
                For source you either give DOI, pubmed or filename (if doi or pubmed is not available).
                File filename you give a filename of the file in the folder together with the extension.
